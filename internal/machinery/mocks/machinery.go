// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/internal/machinery (interfaces: Machinery)

// Package mocks is a generated GoMock package.
package mocks

import (
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMachinery is a mock of Machinery interface
type MockMachinery struct {
	ctrl     *gomock.Controller
	recorder *MockMachineryMockRecorder
}

// MockMachineryMockRecorder is the mock recorder for MockMachinery
type MockMachineryMockRecorder struct {
	mock *MockMachinery
}

// NewMockMachinery creates a new mock instance
func NewMockMachinery(ctrl *gomock.Controller) *MockMachinery {
	mock := &MockMachinery{ctrl: ctrl}
	mock.recorder = &MockMachineryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachinery) EXPECT() *MockMachineryMockRecorder {
	return m.recorder
}

// IsUpgrading mocks base method
func (m *MockMachinery) IsUpgrading(arg0 client.Client, arg1 string, arg2 logr.Logger) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrading", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgrading indicates an expected call of IsUpgrading
func (mr *MockMachineryMockRecorder) IsUpgrading(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrading", reflect.TypeOf((*MockMachinery)(nil).IsUpgrading), arg0, arg1, arg2)
}
